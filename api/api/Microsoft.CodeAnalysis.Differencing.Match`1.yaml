id: Microsoft.CodeAnalysis.Differencing.Match`1
href: Microsoft.CodeAnalysis.Differencing.Match`1.yaml
name:
  CSharp: Match<TNode>
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.Differencing.Match<TNode>
type: Class
source:
  remote: &o0
    branch: master
    repo: https://github.com/chenkennt/roslyn.git
    description: v1.0-12-gef085ea
  path: src/Workspaces/Core/Portable/Differencing/Match.LongestCommonSubsequence.cs
  startLine: 8
syntax:
  content:
    CSharp: public sealed partial class Match<TNode>
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.Differencing.Match`1.Comparer
  href: Microsoft.CodeAnalysis.Differencing.Match`1.yaml
  name:
    CSharp: Comparer
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Differencing.Match<TNode>.Comparer
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Differencing/Match.cs
    startLine: 316
  syntax:
    content:
      CSharp: public TreeComparer<TNode> Comparer { get; }
    parameters:
    - id: Comparer
      type:
        id: Microsoft.CodeAnalysis.Differencing.TreeComparer{`0}
        name: TreeComparer
        href: Microsoft.CodeAnalysis.Differencing.TreeComparer{`0}
- id: Microsoft.CodeAnalysis.Differencing.Match`1.OldRoot
  href: Microsoft.CodeAnalysis.Differencing.Match`1.yaml
  name:
    CSharp: OldRoot
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Differencing.Match<TNode>.OldRoot
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Differencing/Match.cs
    startLine: 324
  syntax:
    content:
      CSharp: public TNode OldRoot { get; }
    parameters:
    - id: OldRoot
      type:
        id: TNode
        name: TNode
        href: TNode
- id: Microsoft.CodeAnalysis.Differencing.Match`1.NewRoot
  href: Microsoft.CodeAnalysis.Differencing.Match`1.yaml
  name:
    CSharp: NewRoot
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Differencing.Match<TNode>.NewRoot
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Differencing/Match.cs
    startLine: 332
  syntax:
    content:
      CSharp: public TNode NewRoot { get; }
    parameters:
    - id: NewRoot
      type:
        id: TNode
        name: TNode
        href: TNode
- id: Microsoft.CodeAnalysis.Differencing.Match`1.Matches
  href: Microsoft.CodeAnalysis.Differencing.Match`1.yaml
  name:
    CSharp: Matches
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Differencing.Match<TNode>.Matches
  type: Property
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Differencing/Match.cs
    startLine: 340
  syntax:
    content:
      CSharp: public IEnumerable<KeyValuePair<TNode, TNode>> Matches { get; }
    parameters:
    - id: Matches
      type:
        id: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`0}}
        name: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`0}}
        isExternal: true
- id: Microsoft.CodeAnalysis.Differencing.Match`1.TryGetNewNode(`0,`0@)
  href: Microsoft.CodeAnalysis.Differencing.Match`1.yaml
  name:
    CSharp: TryGetNewNode(TNode, out TNode)
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Differencing.Match<TNode>.TryGetNewNode(TNode, out TNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Differencing/Match.cs
    startLine: 348
  syntax:
    content:
      CSharp: public bool TryGetNewNode(TNode oldNode, out TNode newNode)
    parameters:
    - id: oldNode
      type:
        id: TNode
        name: TNode
        href: TNode
    - id: newNode
      type:
        id: TNode
        name: TNode
        href: TNode
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.Differencing.Match`1.TryGetOldNode(`0,`0@)
  href: Microsoft.CodeAnalysis.Differencing.Match`1.yaml
  name:
    CSharp: TryGetOldNode(TNode, out TNode)
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Differencing.Match<TNode>.TryGetOldNode(TNode, out TNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Differencing/Match.cs
    startLine: 353
  syntax:
    content:
      CSharp: public bool TryGetOldNode(TNode newNode, out TNode oldNode)
    parameters:
    - id: newNode
      type:
        id: TNode
        name: TNode
        href: TNode
    - id: oldNode
      type:
        id: TNode
        name: TNode
        href: TNode
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.Differencing.Match`1.GetTreeEdits
  href: Microsoft.CodeAnalysis.Differencing.Match`1.yaml
  name:
    CSharp: GetTreeEdits()
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Differencing.Match<TNode>.GetTreeEdits()
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Differencing/Match.cs
    startLine: 362
  summary: >-
    Returns an edit script (a sequence of edits) that transform [Microsoft.CodeAnalysis.Differencing.Match`1.OldRoot](Microsoft.CodeAnalysis.Differencing.Match`1.yaml) subtree

    to [Microsoft.CodeAnalysis.Differencing.Match`1.NewRoot](Microsoft.CodeAnalysis.Differencing.Match`1.yaml) subtree.
  syntax:
    content:
      CSharp: public EditScript<TNode> GetTreeEdits()
    parameters: []
    return:
      id: EditScript
- id: Microsoft.CodeAnalysis.Differencing.Match`1.GetSequenceEdits(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})
  href: Microsoft.CodeAnalysis.Differencing.Match`1.yaml
  name:
    CSharp: GetSequenceEdits(IEnumerable<TNode>, IEnumerable<TNode>)
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.Differencing.Match<TNode>.GetSequenceEdits(System.Collections.Generic.IEnumerable<TNode>, System.Collections.Generic.IEnumerable<TNode>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Differencing/Match.cs
    startLine: 372
  summary: >-
    Returns an edit script (a sequence of edits) that transform a sequence of nodes

    to a sequence of nodes .
  syntax:
    content:
      CSharp: public IEnumerable<Edit<TNode>> GetSequenceEdits(IEnumerable<TNode> oldNodes, IEnumerable<TNode> newNodes)
    parameters:
    - id: oldNodes
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
    - id: newNodes
      type:
        id: System.Collections.Generic.IEnumerable{`0}
        name: System.Collections.Generic.IEnumerable{`0}
        isExternal: true
    return:
      id: IEnumerable
