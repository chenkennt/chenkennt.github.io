items:
- uid: Microsoft.CodeAnalysis.Emit.SemanticEdit
  href: Microsoft.CodeAnalysis.Emit.SemanticEdit.yml
  name: SemanticEdit
  fullName: Microsoft.CodeAnalysis.Emit.SemanticEdit
  type: Struct
  source:
    remote: &o0
      branch: master
      repo: https://github.com/chenkennt/roslyn.git
      description: v1.0-12-gef085ea
    path: src/Compilers/Core/Portable/Emit/SemanticEdit.cs
    startLine: 34
  summary: >-
    Describes a symbol edit between two compilations.

    For example, an addition of a method, an update of a method, removal of a type, etc.
  syntax:
    content:
      CSharp: public struct SemanticEdit
  inheritance:
  - id: System.Object
    name: System.Object
    isExternal: true
  - id: System.ValueType
    name: System.ValueType
    isExternal: true
  id: Microsoft.CodeAnalysis.Emit.SemanticEdit
  children:
  - Microsoft.CodeAnalysis.Emit.SemanticEdit.Kind
  - Microsoft.CodeAnalysis.Emit.SemanticEdit.OldSymbol
  - Microsoft.CodeAnalysis.Emit.SemanticEdit.NewSymbol
  - Microsoft.CodeAnalysis.Emit.SemanticEdit.SyntaxMap
  - Microsoft.CodeAnalysis.Emit.SemanticEdit.PreserveLocalVariables
  - Microsoft.CodeAnalysis.Emit.SemanticEdit.#ctor(Microsoft.CodeAnalysis.Emit.SemanticEditKind,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode},System.Boolean)
  - Microsoft.CodeAnalysis.Emit.SemanticEdit.GetHashCode
  - Microsoft.CodeAnalysis.Emit.SemanticEdit.Equals(System.Object)
  - Microsoft.CodeAnalysis.Emit.SemanticEdit.Equals(Microsoft.CodeAnalysis.Emit.SemanticEdit)
- uid: Microsoft.CodeAnalysis.Emit.SemanticEdit.Kind
  href: Microsoft.CodeAnalysis.Emit.SemanticEdit.yml
  name: Kind
  fullName: Microsoft.CodeAnalysis.Emit.SemanticEdit.Kind
  type: Field
  source:
    remote: *o0
    path: src/Compilers/Core/Portable/Emit/SemanticEdit.cs
    startLine: 42
  summary: The type of edit.
  syntax:
    content:
      CSharp: Kind
  id: Microsoft.CodeAnalysis.Emit.SemanticEdit.Kind
- uid: Microsoft.CodeAnalysis.Emit.SemanticEdit.OldSymbol
  href: Microsoft.CodeAnalysis.Emit.SemanticEdit.yml
  name: OldSymbol
  fullName: Microsoft.CodeAnalysis.Emit.SemanticEdit.OldSymbol
  type: Field
  source:
    remote: *o0
    path: src/Compilers/Core/Portable/Emit/SemanticEdit.cs
    startLine: 48
  summary: >-
    The symbol from the earlier compilation,

    or null if the edit represents an addition.
  syntax:
    content:
      CSharp: OldSymbol
  id: Microsoft.CodeAnalysis.Emit.SemanticEdit.OldSymbol
- uid: Microsoft.CodeAnalysis.Emit.SemanticEdit.NewSymbol
  href: Microsoft.CodeAnalysis.Emit.SemanticEdit.yml
  name: NewSymbol
  fullName: Microsoft.CodeAnalysis.Emit.SemanticEdit.NewSymbol
  type: Field
  source:
    remote: *o0
    path: src/Compilers/Core/Portable/Emit/SemanticEdit.cs
    startLine: 54
  summary: >-
    The symbol from the later compilation,

    or null if the edit represents a deletion.
  syntax:
    content:
      CSharp: NewSymbol
  id: Microsoft.CodeAnalysis.Emit.SemanticEdit.NewSymbol
- uid: Microsoft.CodeAnalysis.Emit.SemanticEdit.SyntaxMap
  href: Microsoft.CodeAnalysis.Emit.SemanticEdit.yml
  name: SyntaxMap
  fullName: Microsoft.CodeAnalysis.Emit.SemanticEdit.SyntaxMap
  type: Field
  source:
    remote: *o0
    path: src/Compilers/Core/Portable/Emit/SemanticEdit.cs
    startLine: 65
  summary: >-
    A map from syntax node in the later compilation to syntax node in the previous compilation,

    or null if [Microsoft.CodeAnalysis.Emit.SemanticEdit.PreserveLocalVariables](Microsoft.CodeAnalysis.Emit.SemanticEdit.yml) is false and the map is not needed or

    the source of the current method is the same as the source of the previous method.
  syntax:
    content:
      CSharp: SyntaxMap
  id: Microsoft.CodeAnalysis.Emit.SemanticEdit.SyntaxMap
- uid: Microsoft.CodeAnalysis.Emit.SemanticEdit.PreserveLocalVariables
  href: Microsoft.CodeAnalysis.Emit.SemanticEdit.yml
  name: PreserveLocalVariables
  fullName: Microsoft.CodeAnalysis.Emit.SemanticEdit.PreserveLocalVariables
  type: Field
  source:
    remote: *o0
    path: src/Compilers/Core/Portable/Emit/SemanticEdit.cs
    startLine: 71
  summary: >-
    True if the edit is an update of the active method and local values

    should be preserved; false otherwise.
  syntax:
    content:
      CSharp: PreserveLocalVariables
  id: Microsoft.CodeAnalysis.Emit.SemanticEdit.PreserveLocalVariables
- uid: Microsoft.CodeAnalysis.Emit.SemanticEdit.#ctor(Microsoft.CodeAnalysis.Emit.SemanticEditKind,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode},System.Boolean)
  href: Microsoft.CodeAnalysis.Emit.SemanticEdit.yml
  name: SemanticEdit(SemanticEditKind, ISymbol, ISymbol, Func<SyntaxNode, SyntaxNode>, bool)
  fullName: Microsoft.CodeAnalysis.Emit.SemanticEdit.SemanticEdit(Microsoft.CodeAnalysis.Emit.SemanticEditKind, Microsoft.CodeAnalysis.ISymbol, Microsoft.CodeAnalysis.ISymbol, System.Func<Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SyntaxNode>, bool)
  type: Constructor
  source:
    remote: *o0
    path: src/Compilers/Core/Portable/Emit/SemanticEdit.cs
    startLine: 91
  summary: Initializes an instance of [Microsoft.CodeAnalysis.Emit.SemanticEdit](Microsoft.CodeAnalysis.Emit.SemanticEdit.yml).
  syntax:
    content:
      CSharp: public SemanticEdit(SemanticEditKind kind, ISymbol oldSymbol, ISymbol newSymbol, Func<SyntaxNode, SyntaxNode> syntaxMap = null, bool preserveLocalVariables = false)
    parameters:
    - id: kind
      type:
        id: Microsoft.CodeAnalysis.Emit.SemanticEditKind
        name: SemanticEditKind
        href: Microsoft.CodeAnalysis.Emit.SemanticEditKind.yml
      description: The type of edit.
    - id: oldSymbol
      type:
        id: Microsoft.CodeAnalysis.ISymbol
        name: ISymbol
        href: Microsoft.CodeAnalysis.ISymbol
      description: The symbol from the earlier compilation, or null if the edit represents an addition.
    - id: newSymbol
      type:
        id: Microsoft.CodeAnalysis.ISymbol
        name: ISymbol
        href: Microsoft.CodeAnalysis.ISymbol
      description: The symbol from the later compilation, or null if the edit represents a deletion.
    - id: syntaxMap
      type:
        id: System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode}
        name: System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode}
        isExternal: true
      description: >-
        A map from syntax node in the later compilation to syntax node in the previous compilation,

        or null if  is false and the map is not needed or

        the source of the current method is the same as the source of the previous method.
    - id: preserveLocalVariables
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
      description: True if the edit is an update of an active method and local values should be preserved; false otherwise.
  id: Microsoft.CodeAnalysis.Emit.SemanticEdit.#ctor(Microsoft.CodeAnalysis.Emit.SemanticEditKind,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode},System.Boolean)
- uid: Microsoft.CodeAnalysis.Emit.SemanticEdit.GetHashCode
  href: Microsoft.CodeAnalysis.Emit.SemanticEdit.yml
  name: GetHashCode()
  fullName: Microsoft.CodeAnalysis.Emit.SemanticEdit.GetHashCode()
  type: Method
  source:
    remote: *o0
    path: src/Compilers/Core/Portable/Emit/SemanticEdit.cs
    startLine: 101
  syntax:
    content:
      CSharp: public override int GetHashCode()
    parameters: []
    return:
      id: Int32
  id: Microsoft.CodeAnalysis.Emit.SemanticEdit.GetHashCode
- uid: Microsoft.CodeAnalysis.Emit.SemanticEdit.Equals(System.Object)
  href: Microsoft.CodeAnalysis.Emit.SemanticEdit.yml
  name: Equals(object)
  fullName: Microsoft.CodeAnalysis.Emit.SemanticEdit.Equals(object)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/Core/Portable/Emit/SemanticEdit.cs
    startLine: 108
  syntax:
    content:
      CSharp: public override bool Equals(object obj)
    parameters:
    - id: obj
      type:
        id: System.Object
        name: System.Object
        isExternal: true
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.Emit.SemanticEdit.Equals(System.Object)
- uid: Microsoft.CodeAnalysis.Emit.SemanticEdit.Equals(Microsoft.CodeAnalysis.Emit.SemanticEdit)
  href: Microsoft.CodeAnalysis.Emit.SemanticEdit.yml
  name: Equals(SemanticEdit)
  fullName: Microsoft.CodeAnalysis.Emit.SemanticEdit.Equals(Microsoft.CodeAnalysis.Emit.SemanticEdit)
  type: Method
  source:
    remote: *o0
    path: src/Compilers/Core/Portable/Emit/SemanticEdit.cs
    startLine: 113
  syntax:
    content:
      CSharp: public bool Equals(SemanticEdit other)
    parameters:
    - id: other
      type:
        id: Microsoft.CodeAnalysis.Emit.SemanticEdit
        name: SemanticEdit
        href: Microsoft.CodeAnalysis.Emit.SemanticEdit.yml
    return:
      id: Boolean
  id: Microsoft.CodeAnalysis.Emit.SemanticEdit.Equals(Microsoft.CodeAnalysis.Emit.SemanticEdit)
